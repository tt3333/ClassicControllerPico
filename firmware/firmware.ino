#include <Wire.h>

#include "config.h"

#ifdef DEBUG
	#define DEBUG_SET_TX()		UART.setTX(PIN_UART_TX)
	#define DEBUG_SET_RX()		UART.setRX(PIN_UART_RX)
	#define DEBUG_BEGIN()		UART.begin(UART_BAUDRATE)
	#define DEBUG_PRINTF(...)	UART.printf(__VA_ARGS__)
	#define DEBUG_WRITE(c)		UART.write(c)
#else
	#define DEBUG_SET_TX()
	#define DEBUG_SET_RX()
	#define DEBUG_BEGIN()
	#define DEBUG_PRINTF(...)
	#define DEBUG_WRITE(c)
#endif

static byte registers[256] =
{
	// 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 0
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 1
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 2
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 3
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 4
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 5
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 6
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 8
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// 9
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// A
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// B
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// C
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// D
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	// E
	0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xA4, 0x20, 0x01, 0x01,	// F
};

static byte address = 0;
static bool ready = false;

static void getInputs()
{
	uint32_t buttons = GET_BUTTONS();
	uint32_t lt = buttons & bit(5);
	uint32_t rt = buttons & bit(1);

	switch (registers[0xFE])
	{
	case 1:
		registers[0x00] = 0xA0;
		registers[0x01] = 0x20;
		registers[0x02] = lt ? 0x10 : 0x70;
		registers[0x03] = (lt? 0x00 : 0xE0) | (rt ? 0x00 : 0x1F);
		registers[0x04] = lowByte(buttons);
		registers[0x05] = highByte(buttons);
		registers[0x06] = 0x00;
		registers[0x07] = 0x00;
		registers[0x08] = 0x00;
		break;
	case 2:
		registers[0x00] = 0x80;
		registers[0x01] = 0x80;
		registers[0x02] = 0x80;
		registers[0x03] = 0x80;
		registers[0x04] = 0x00;
		registers[0x05] = lt ? 0x00 : 0xFF;
		registers[0x06] = rt ? 0x00 : 0xFF;
		registers[0x07] = lowByte(buttons);
		registers[0x08] = highByte(buttons);
		break;
	case 3:
		registers[0x00] = 0x80;
		registers[0x01] = 0x80;
		registers[0x02] = 0x80;
		registers[0x03] = 0x80;
		registers[0x04] = lt ? 0x00 : 0xFF;
		registers[0x05] = rt ? 0x00 : 0xFF;
		registers[0x06] = lowByte(buttons);
		registers[0x07] = highByte(buttons);
		registers[0x08] = 0x00;
		break;
	}
}

static void onReceive(int count)
{
	digitalWrite(LED_BUILTIN, HIGH);
	DEBUG_WRITE("write");

	if (count > 0)
	{
		address = I2C.read();
		DEBUG_PRINTF(" %02X", address);

		if (address < 0x09)
		{
			getInputs();
		}
	}

	for (int i = 1; i < count; i++)
	{
		byte data = I2C.read();
		DEBUG_PRINTF(" %02X", data);

		if (address == 0xFE)
		{
			registers[address] = data;
		}

		address++;
	}

	DEBUG_WRITE("\r\n");
	digitalWrite(LED_BUILTIN, LOW);
}

static void onRequest()
{
	digitalWrite(LED_BUILTIN, HIGH);
	DEBUG_WRITE("read\r\n");

	for (int i = 0; i < 8; i++)
	{
		byte data = registers[address];
		I2C.write(data);

		if (++address == 0)
		{
			break;
		}
	}

	digitalWrite(LED_BUILTIN, LOW);
}

void setup()
{
	// Initialize Detect pin first
	pinMode(PIN_DETECT, OUTPUT);
	pinMode(PIN_3V3, INPUT_PULLDOWN);
	pinMode(LED_BUILTIN, OUTPUT);

	for (int i = 0; i < 16; i++)
	{
		pinMode(i, INPUT_PULLUP);
	}

	DEBUG_SET_TX();
	DEBUG_SET_RX();
	DEBUG_BEGIN();

	I2C.setSDA(PIN_I2C_SDA);
	I2C.setSCL(PIN_I2C_SCL);
	I2C.setClock(I2C_CLOCK);
	I2C.onReceive(onReceive);
	I2C.onRequest(onRequest);
}

void loop()
{
	if (ready)
	{
		if (digitalRead(PIN_3V3) == LOW)
		{
			digitalWrite(PIN_DETECT, LOW);
			DEBUG_WRITE("disconnect\r\n");
			ready = false;
			I2C.end();
			delay(DETECT_WAIT);
		}
	}
	else
	{
		if (digitalRead(PIN_3V3) == HIGH)
		{
			delay(DETECT_WAIT);
			if (digitalRead(PIN_3V3) == HIGH)
			{
				I2C.begin(0x52);
				ready = true;
				DEBUG_WRITE("connect\r\n");
				digitalWrite(PIN_DETECT, HIGH);
			}
		}
	}
}
